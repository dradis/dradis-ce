import{connectStreamSource as e,disconnectStreamSource as t}from"@hotwired/turbo";import*as n from"@hotwired/turbo";export{n as Turbo};let s;async function getConsumer(){return s||setConsumer(createConsumer().then(setConsumer))}function setConsumer(e){return s=e}async function createConsumer(){const{createConsumer:e}=await import("@rails/actioncable/src");return e()}async function subscribeTo(e,t){const{subscriptions:n}=await getConsumer();return n.create(e,t)}var o=Object.freeze(Object.defineProperty({__proto__:null,getConsumer:getConsumer,setConsumer:setConsumer,createConsumer:createConsumer,subscribeTo:subscribeTo},Symbol.toStringTag,{value:"Module"}));function walk(e){return e&&"object"===typeof e?e instanceof Date||e instanceof RegExp?e:Array.isArray(e)?e.map(walk):Object.keys(e).reduce((function(t,n){var s=n[0].toLowerCase()+n.slice(1).replace(/([A-Z]+)/g,(function(e,t){return"_"+t.toLowerCase()}));t[s]=walk(e[n]);return t}),{}):e}class TurboCableStreamSourceElement extends HTMLElement{async connectedCallback(){e(this);this.subscription=await subscribeTo(this.channel,{received:this.dispatchMessageEvent.bind(this),connected:this.subscriptionConnected.bind(this),disconnected:this.subscriptionDisconnected.bind(this)})}disconnectedCallback(){t(this);this.subscription&&this.subscription.unsubscribe()}dispatchMessageEvent(e){const t=new MessageEvent("message",{data:e});return this.dispatchEvent(t)}subscriptionConnected(){this.setAttribute("connected","")}subscriptionDisconnected(){this.removeAttribute("connected")}get channel(){const e=this.getAttribute("channel");const t=this.getAttribute("signed-stream-name");return{channel:e,signed_stream_name:t,...walk({...this.dataset})}}}void 0===customElements.get("turbo-cable-stream-source")&&customElements.define("turbo-cable-stream-source",TurboCableStreamSourceElement);function encodeMethodIntoRequestBody(e){if(e.target instanceof HTMLFormElement){const{target:t,detail:{fetchOptions:n}}=e;t.addEventListener("turbo:submit-start",(({detail:{formSubmission:{submitter:e}}})=>{const s=isBodyInit(n.body)?n.body:new URLSearchParams;const o=determineFetchMethod(e,s,t);if(!/get/i.test(o)){/post/i.test(o)?s.delete("_method"):s.set("_method",o);n.method="post"}}),{once:true})}}function determineFetchMethod(e,t,n){const s=determineFormMethod(e);const o=t.get("_method");const r=n.getAttribute("method")||"get";return"string"==typeof s?s:"string"==typeof o?o:r}function determineFormMethod(e){return(e instanceof HTMLButtonElement||e instanceof HTMLInputElement)&&e.hasAttribute("formmethod")?e.formMethod:null}function isBodyInit(e){return e instanceof FormData||e instanceof URLSearchParams}addEventListener("turbo:before-fetch-request",encodeMethodIntoRequestBody);export{o as cable};

